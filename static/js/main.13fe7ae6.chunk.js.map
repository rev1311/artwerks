{"version":3,"sources":["components/LoginPage.js","components/Artist.js","components/ArtistCard.js","components/Main.js","components/Routes.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["LoginPage","Container","Row","Col","sm","md","lg","className","type","placeholder","name","id","required","autocomplete","for","to","Button","variant","Component","Artist","state","props","seeds","style","color","this","ArtistCard","img","alt","title","desc","speedseeds","artworks","sort","Math","random","map","art","Card","key","margin","fontFamily","boxShadow","Img","src","ImgOverlay","Title","Main","Routes","exact","path","component","Nav","position","center","bottom","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"onJAmCeA,G,MA5Bf,iLAEQ,OACA,kBAACC,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IACpB,yBAAKC,UAAU,eACf,yBAAKA,UAAU,iCACX,2BAAOC,KAAK,QAAQD,UAAU,cAAcE,YAAY,OAAOC,KAAK,OAAOC,GAAG,OAAOC,UAAQ,EAACC,aAAa,QAC3G,2BAAOC,IAAI,OAAOP,UAAU,eAA5B,aAEJ,yBAAKA,UAAU,iCACX,2BAAOC,KAAK,WAAWD,UAAU,cAAcE,YAAY,WAAWC,KAAK,WAAWC,GAAG,WAAWC,UAAQ,EAACC,aAAa,QAC1H,2BAAOC,IAAI,WAAWP,UAAU,eAAhC,aAEJ,yBAAKA,UAAU,OACX,kBAAC,IAAD,CAAMQ,GAAG,SAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,gBAAhB,UACjB,kBAAC,IAAD,CAAMF,GAAG,SAAQ,kBAACC,EAAA,EAAD,CAAQC,QAAQ,gBAAhB,kBAjB7C,GAA+BC,c,QC+BhBC,E,2MAhCXC,MAAQ,CACJT,GAAI,EAAKU,MAAMV,GACfW,S,qHAQA,OACI,kBAACrB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKE,GAAI,GACL,+BAGJ,kBAACF,EAAA,EAAD,CAAKE,GAAI,GACL,yBAAKE,UAAU,UACX,wBAAIgB,MAAO,CAAEC,MAAO,SAApB,eAA2CC,KAAKL,MAAMT,MAG9D,kBAACR,EAAA,EAAD,CAAKE,GAAI,GACL,qC,GAxBHa,a,wBCmCNQ,E,2MAlCXN,MAAQ,CACJT,GAAI,EACJD,KAAM,GACNiB,IAAK,GACLC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,c,wEAIA,IAAMC,EAAQ,YAAOP,KAAKL,MAAMW,YAGhC,OAFAC,EAASC,MAAK,kBAAMC,KAAKC,SAAW,MAGhCH,EAASI,KAAI,SAAAC,GACT,OACJ,6BACI,kBAAC,IAAD,CAAMtB,GAAK,WAAasB,EAAI1B,IAC5B,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,qBAAqBgC,IAAKF,EAAI1B,GAAIY,MAAO,CAAEiB,OAAQ,OAAQC,WAAY,SAAUC,UAAW,mCACxG,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,IAAKP,EAAIV,IAAKC,IAAKS,EAAIT,IAAKL,MAAO,KAC7C,kBAACe,EAAA,EAAKO,WAAN,KACA,kBAACP,EAAA,EAAKQ,MAAN,CAAYvB,MAAO,CAAEiB,OAAQ,SAAWH,EAAIR,OAC5C,kBAACS,EAAA,EAAKQ,MAAN,gBAAqBT,EAAI3B,iB,GAxBpBQ,aCyBV6B,EAzBf,iLAEQ,OACI,kBAAC9C,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKE,GAAI,GACL,+BAGJ,kBAACF,EAAA,EAAD,CAAKE,GAAI,GACL,yBAAKE,UAAU,cACX,kBAAC,EAAD,QAGR,kBAACJ,EAAA,EAAD,CAAKE,GAAI,GACL,qCAfxB,GAA0Ba,a,QCYX8B,EAVA,kBACX,kBAAC,IAAD,KACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC,kBAAC,IAAD,CAAOkD,KAAK,QAAQC,UAAWJ,IAC/B,kBAAC,IAAD,CAAOG,KAAK,kBAAkBC,UAAWhC,OCAlCiC,EAVf,iLAEQ,OACI,yBAAK7C,UAAU,QACX,yBAAKqC,IAAI,qBAAqBhB,IAAI,GAAGL,MAAO,CAAE8B,SAAU,QAASC,OAAQ,IAAKC,OAAQ,YAJtG,GAAyBrC,aCeVsC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCAckD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13fe7ae6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport './LoginPage.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport class LoginPage extends Component {\r\n    render() {\r\n        return (\r\n        <Container>\r\n                <Row>\r\n                    <Col sm={8} md={10} lg={10}>\r\n                        <div className=\"loginwindow\">\r\n                        <div className=\"form__group field loginwindow\">\r\n                            <input type=\"input\" className=\"form__field\" placeholder=\"Name\" name=\"name\" id='name' required autocomplete=\"off\" />\r\n                            <label for=\"name\" className=\"form__label\">username</label>\r\n                        </div>\r\n                        <div className=\"form__group field loginwindow\">\r\n                            <input type=\"password\" className=\"form__field\" placeholder=\"Password\" name=\"password\" id='password' required autocomplete=\"off\" />\r\n                            <label for=\"password\" className=\"form__label\">password</label>\r\n                        </div>\r\n                        <div className=\"btn\">\r\n                            <Link to=\"/Main\"><Button variant=\"outline-info\">Login</Button></Link>\r\n                            <Link to=\"/Main\"><Button variant=\"outline-info\">Join</Button></Link>\r\n                        </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n        </Container>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport seeds from '../mainseeds.json';\r\n\r\n\r\nclass Artist extends Component {\r\n    state = {\r\n        id: this.props.id,\r\n        seeds\r\n    }\r\n    componentDidMount () {\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md={2}>\r\n                        <div>\r\n                        </div>                        \r\n                    </Col>\r\n                    <Col md={8}>\r\n                        <div className=\"artist\">\r\n                            <h1 style={{ color: \"#fff\" }}>Artist test {this.state.id}</h1>\r\n                        </div>                        \r\n                    </Col>\r\n                    <Col md={2}>\r\n                        <div>\r\n                        </div>                        \r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Artist;\r\n","import React, { Component } from 'react';\r\nimport speedseeds from '../speedseeds.json';\r\nimport { Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ArtistCard extends Component {\r\n    state = {\r\n        id: 0,\r\n        name: \"\",\r\n        img: \"\",\r\n        alt: \"\",\r\n        title: \"\",\r\n        desc: \"\",\r\n        speedseeds\r\n    }\r\n\r\n    render() {\r\n        const artworks = [...this.state.speedseeds];\r\n        artworks.sort(() => Math.random() - 0.5);\r\n\r\n        return (\r\n            artworks.map(art => {\r\n                return (\r\n            <div>\r\n                <Link to={ \"/Artist/\" + art.id }>\r\n                <Card className=\"bg-dark text-white\" key={art.id} style={{ margin: \"20px\", fontFamily: 'Cinzel', boxShadow: \"-1px 0 5px 0 rgba(0, 0, 0, .7)\" }}>\r\n                    <Card.Img src={art.img} alt={art.alt} style={{  }} />\r\n                    <Card.ImgOverlay>\r\n                    <Card.Title style={{ margin: \"-2px\" }}>{art.title}</Card.Title>\r\n                    <Card.Title>Artist: {art.name}</Card.Title>\r\n                    </Card.ImgOverlay>\r\n                </Card>\r\n                </Link>\r\n                \r\n            </div>\r\n        )\r\n    }));\r\n}\r\n};\r\n\r\nexport default ArtistCard;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport ArtistCard from './ArtistCard';\r\n\r\n\r\nexport class Main extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md={3}>\r\n                        <div>\r\n                        </div>                        \r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <div className=\"artistcard\">\r\n                            <ArtistCard />\r\n                        </div>                        \r\n                    </Col>\r\n                    <Col md={3}>\r\n                        <div>\r\n                        </div>                        \r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport LoginPage from './LoginPage';\r\nimport Artist from './Artist';\r\nimport Main from './Main';\r\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\r\n\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter>\r\n    <Switch>\r\n        <Route exact path=\"/\" component={LoginPage} />\r\n        <Route path=\"/Main\" component={Main} />\r\n        <Route path=\"/Artist/:handle\" component={Artist} />\r\n    </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\nexport default Routes;","import React, { Component } from 'react';\r\n\r\nexport class Nav extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"foot\">\r\n                <img src=\"./assets/logo2.png\" alt=\"\" style={{ position: \"fixed\", center: \"0\", bottom: \"0\" }} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Routes from './components/Routes';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes />\n      </div>\n      <Nav />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}